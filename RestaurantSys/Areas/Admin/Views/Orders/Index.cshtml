@model IEnumerable<RestaurantSys.Models.Order>

@{
    ViewData["Title"] = "所有訂單";
}

<h2 class="fw-bold">@ViewData["Title"]</h2>


@*會員取餐modal*@
<div class="modal fade" id="confirmTakeOutModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmModalLabel">確認取餐</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                您確定會員已取餐了嗎？
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">否</button>
                <button type="button" class="btn btn-primary" id="confirmTakeOutBtn">是</button>
            </div>
        </div>
    </div>
</div>

<table class="table table-hover">
    <thead>
        <tr>
            <th>訂單編號</th>
            <th>會員編號</th>
            <th>訂單日期</th>
            <th>訂單總金額</th>
            <th>實際取餐時間</th>
            <th>備註</th>
            <th>@Html.DisplayNameFor(model => model.OrderStatus.OrderStatusName)</th>
            <th>操作</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td class="fw-bold">@Html.DisplayFor(modelItem => item.OrderID)</td>
                <td class="fw-bold">@Html.DisplayFor(modelItem => item.MemberID)</td>
                <td>@item.OrderDate.ToString("yyyy/MM/dd HH:mm:ss")</td>
                <td>
                    @{
                        var totalAmount = item.OrderDetails?.Sum(od => od.Quantity * od.UnitPrice) ?? 0;
                    }
                    NT$ @totalAmount.ToString("N0")
                </td>
                <td>@item.OrderDetails?.FirstOrDefault()?.GetTime?.ToString("yyyy/MM/dd HH:mm")</td>
                <td>@Html.DisplayFor(modelItem => item.Note)</td>
                <td id="status-column-@item.OrderID">@Html.DisplayFor(modelItem => item.OrderStatus.OrderStatusName)</td>
                <td>
                    <a asp-area="Admin" asp-controller="Orders" asp-action="Details" asp-route-id="@item.OrderID">訂單詳情</a>
                    @if (item.OrderStatusID == "01") // 訂單待處理狀態
                    {
                        <button class="btn btn-success btn-sm accept-order-btn" data-order-id="@item.OrderID">接受</button>
                        <button class="btn btn-danger btn-sm reject-order-btn" data-order-id="@item.OrderID">拒絕</button>
                    }
                    else if (item.OrderStatusID == "02" || item.OrderStatusID == "03") // 訂單準備中或未取餐狀態
                    {
                        @if (item.OrderStatusID == "02")
                        {
                            <button class="btn btn-primary btn-sm status-change-btn" data-order-id="@item.OrderID" data-new-status="04">已取餐</button>
                            <button class="btn btn-warning btn-sm status-change-btn" data-order-id="@item.OrderID" data-new-status="03">未取餐</button>
                        }
                        else if (item.OrderStatusID == "03") // 未取餐狀態
                        {
                            <button class="btn btn-primary btn-sm status-change-btn" data-order-id="@item.OrderID" data-new-status="04">已取餐</button>
                            <button class="btn btn-danger btn-sm cancel-order-btn" data-order-id="@item.OrderID">取消訂單</button>
                        }
                    }
                    else if (item.OrderStatusID == "04") // 已取餐狀態，隱藏所有按鈕
                    {
                        <!-- 不顯示任何按鈕 -->
                    }
                    else if (item.OrderStatusID != "05") // 當狀態不是已取消時，顯示取消訂單按鈕
                    {
                        <button class="btn btn-danger btn-sm cancel-order-btn" data-order-id="@item.OrderID">取消訂單</button>
                    }
                </td>
            </tr>
        }

    </tbody>
</table>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {

            document.querySelector('.table').addEventListener('click', function (e) {
                const btn = e.target.closest('.accept-order-btn, .reject-order-btn, .status-change-btn, .cancel-order-btn');
                if (!btn) return;

                const orderId = btn.dataset.orderId;
                let newStatus = '';

                if (btn.classList.contains('accept-order-btn')) {
                    newStatus = '02';
                    updateOrderStatus(orderId, newStatus);
                } else if (btn.classList.contains('reject-order-btn')) {
                    newStatus = '05';
                    updateOrderStatus(orderId, newStatus);
                } else if (btn.classList.contains('cancel-order-btn')) {
                    newStatus = '05';
                    updateOrderStatus(orderId, newStatus);
                } else if (btn.classList.contains('status-change-btn') && btn.dataset.newStatus === '04') {
                    // 點擊「已取餐」按鈕時，先顯示 Modal
                    const modal = new bootstrap.Modal(document.getElementById('confirmTakeOutModal'));
                    document.getElementById('confirmTakeOutBtn').dataset.orderId = orderId;
                    modal.show();
                } else if (btn.classList.contains('status-change-btn')) {
                    newStatus = btn.dataset.newStatus;
                    updateOrderStatus(orderId, newStatus);
                }
            });

            // 處理 Modal 內的確認按鈕點擊事件
            document.getElementById('confirmTakeOutBtn').addEventListener('click', function () {
                const orderId = this.dataset.orderId;
                const newStatus = '04';
                // 新增：取得當前時間
                const currentTime = new Date().toISOString();
                updateOrderStatus(orderId, newStatus, currentTime); // 將時間傳入函式
                const modal = bootstrap.Modal.getInstance(document.getElementById('confirmTakeOutModal'));
                modal.hide();
            });


            async function updateOrderStatus(orderId, newStatus, getTime = null) {
                // 創建 FormData 物件來處理多個參數
                const formData = new URLSearchParams();
                formData.append('id', orderId);
                formData.append('statusId', newStatus);

                // 如果是「已取餐」狀態，則加入取餐時間
                if (getTime) {
                    formData.append('getTime', getTime);
                }

                try {
                    const response = await fetch('@Url.Action("ChangeStatus", "Orders", new { area = "Admin" })', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
                        },
                        body: formData.toString() // 使用 toString() 將 FormData 轉換為字串
                    });

                    const result = await response.json();

                    if (result.success) {
                        const statusColumn = document.getElementById(`status-column-${orderId}`);
                        const buttonContainer = statusColumn.nextElementSibling;
                        if (statusColumn) {
                            let newStatusText = "";
                            let newButtonsHtml = "";

                            if (newStatus === "02") {
                                newStatusText = "訂單準備中";
                                newButtonsHtml = `
                                    <button class="btn btn-primary btn-sm status-change-btn" data-order-id="${orderId}" data-new-status="04">已取餐</button>
                                    <button class="btn btn-warning btn-sm status-change-btn" data-order-id="${orderId}" data-new-status="03">未取餐</button>
                                    <button class="btn btn-danger btn-sm cancel-order-btn" data-order-id="${orderId}">取消訂單</button>
                                `;
                            } else if (newStatus === "03") {
                                newStatusText = "未取餐";
                                newButtonsHtml = `
                                    <button class="btn btn-primary btn-sm status-change-btn" data-order-id="${orderId}" data-new-status="04">已取餐</button>
                                    <button class="btn btn-danger btn-sm cancel-order-btn" data-order-id="${orderId}">取消訂單</button>
                                `;
                            } else if (newStatus === "04") {
                                newStatusText = "已取餐";
                                newButtonsHtml = "";
                                // 新增：成功後刷新頁面
                                window.location.reload();
                            } else if (newStatus === "05") {
                                newStatusText = "訂單已取消";
                                newButtonsHtml = "";
                            }
                            // 如果是「已取餐」或「已取消」，不需動態替換按鈕
                            if (newStatus !== "04" && newStatus !== "05") {
                                statusColumn.innerText = newStatusText;
                                const linkTag = buttonContainer.querySelector('a');
                                buttonContainer.innerHTML = '';
                                if (linkTag) {
                                    buttonContainer.appendChild(linkTag);
                                }
                                if (newButtonsHtml) {
                                    buttonContainer.insertAdjacentHTML('beforeend', newButtonsHtml);
                                }
                            }
                        }
                    } else {
                        alert("狀態更新失敗: " + result.message);
                    }
                } catch (error) {
                    console.error("狀態更新時發生錯誤:", error);
                    alert("狀態更新時發生錯誤。");
                }
            }
        });
    </script>
}